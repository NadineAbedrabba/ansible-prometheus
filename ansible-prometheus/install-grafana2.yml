---
- name: Installer et configurer Grafana depuis archive
  hosts: grafana
  become: yes
  vars:
    grafana_version: "10.4.1"
    grafana_archive: "grafana-{{ grafana_version }}.linux-amd64.tar.gz"
    grafana_url: "https://dl.grafana.com/oss/release/{{ grafana_archive }}"
    grafana_install_dir: "/opt/grafana"
    grafana_user: grafana
    grafana_home: "{{ grafana_install_dir }}/grafana-v{{ grafana_version }}"
    grafana_port: 3000
    grafana_api: "http://localhost:{{ grafana_port }}"
    grafana_admin_user: admin
    grafana_admin_password: admin
    prometheus_url: "http://localhost:9090"

  tasks:

    - name: Créer l'utilisateur grafana
      user:
        name: "{{ grafana_user }}"
        system: yes
        shell: /sbin/nologin
        create_home: no

    - name: Télécharger l'archive Grafana
      get_url:
        url: "{{ grafana_url }}"
        dest: "/tmp/{{ grafana_archive }}"
        mode: '0644'

    - name: Créer le répertoire d'installation de Grafana
      file:
        path: "{{ grafana_install_dir }}"
        state: directory
        owner: "{{ grafana_user }}"
        group: "{{ grafana_user }}"
        mode: '0755'

    - name: Extraire Grafana
      unarchive:
        src: "/tmp/{{ grafana_archive }}"
        dest: "{{ grafana_install_dir }}"
        remote_src: yes
        creates: "{{ grafana_home }}"

    - name: Fix permissions Grafana home
      file:
        path: "{{ grafana_home }}"
        recurse: yes
        owner: "{{ grafana_user }}"
        group: "{{ grafana_user }}"
        mode: '0755'

    - name: Créer les liens symboliques pour grafana-server et grafana-cli
      file:
        src: "{{ grafana_home }}/bin/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        state: link
      loop:
        - grafana-server
        - grafana-cli

    - name: Créer le fichier de service Grafana
      copy:
        dest: /etc/systemd/system/grafana.service
        content: |
          [Unit]
          Description=Grafana Server
          After=network.target

          [Service]
          ExecStart=/usr/local/bin/grafana-server \
            --homepath {{ grafana_home }}
          User={{ grafana_user }}
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target

    - name: Recharger systemd
      systemd:
        daemon_reload: yes

    - name: Activer et démarrer Grafana
      systemd:
        name: grafana
        enabled: yes
        state: restarted

    - name: Attendre que Grafana soit prêt via API /api/health
      uri:
        url: "{{ grafana_api }}/api/health"
        method: GET
        status_code: 200
        user: "{{ grafana_admin_user }}"
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
      register: grafana_status
      retries: 15
      delay: 6
      until: grafana_status.status == 200
   
   
    - name: Vérifier si la datasource Prometheus existe déjà
      uri:
        url: "{{ grafana_api }}/api/datasources/name/Prometheus"
        method: GET
        user: "{{ grafana_admin_user }}"
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
        status_code: [200, 404]
      register: datasource_check
      
      
    - name: Créer la datasource Prometheus
      uri:
        url: "{{ grafana_api }}/api/datasources"
        method: POST
        user: "{{ grafana_admin_user }}"
        password: "{{ grafana_admin_password }}"
        body_format: json
        headers:
          Content-Type: application/json
        body: |
          {
            "name": "Prometheus",
            "type": "prometheus",
            "url": "{{ prometheus_url }}",
            "access": "proxy",
            "isDefault": true
          }
        status_code: 200
        force_basic_auth: yes
      when: datasource_check.status == 404
  
        

   